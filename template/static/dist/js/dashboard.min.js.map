{"version":3,"sources":["utils.jsx","auth.jsx","validation.jsx","dashboard.jsx","profile.jsx","holder.jsx","contacts/contacts.jsx","contacts/groups.jsx","contacts/holder.jsx","commands/commands.jsx","commands/groups.jsx","commands/holder.jsx","servers/groups.jsx","servers/holder.jsx","servers/servers.jsx","contacts/libs/contacts.jsx","contacts/libs/groups.jsx","servers/libs/groups.jsx","servers/libs/servers.jsx","commands/libs/commands.jsx","commands/libs/groups.jsx","main.jsx"],"names":["removeFromList","l","o","n","i","length","push","removeFromListByKey","parseInt","key","id","excludeByKey","k","j","indexOf","authenticate","email","password","cb","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","data","JSON","parse","responseText","Result","authenticated","token","getResponseHeader","errors","Messages","send","stringify","logout","console","log","passwordValid","validateEmail","re","test","validateUrl","url","validateCommand","cmd","request","call","method","auth","getToken","status","remove","this","get","patch","post","put","AuthenticationMixin","statics","willTransitionTo","transition","nextPath","path","loggedIn","redirect","Login","React","createClass","displayName","contextTypes","router","PropTypes","func","isRequired","getInitialState","getDefaultProps","messages","validationEmailState","state","validationPasswordState","handleChange","setState","refs","getValue","handleSubmit","event","preventDefault","$__0","context","getCurrentQuery","login","replaceWith","bind","render","msgs","props","forEach","msg","createElement","type","Type","message","Content","className","onSubmit","Input","label","ref","placeholder","value","autoFocus","hasFeedback","bsStyle","onChange","Button","Logout","componentDidMount","arguments","localStorage","undefined","res","DashboardHolder","mixins","Link","to","RouteHandler","DashboardOverview","DashboardServers","DashboardApps","ProfileHolder","ProfilePassword","password_confirm","validationPasswordConfirmState","user","updatePassword","success","callback","processPatch","settingsSideMenu","active","link","$","removeClass","elem","addClass","SettingsHolder","SettingsCommands","SettingsTimePeriods","SettingsContactsList","SettingsContactsMixin","propTypes","contacts","array","componentWillMount","getAll","removeContact","contact","SettingsContactsLine","Table","striped","hover","handleDelete","params","contactId","name","bsSize","onClick","SettingsContactsForm","action","handleGet","validateNameState","validateEmailState","update","handleFormResponse","add","SettingsContactsView","all_groups","current_groups","getGroups","isMounted","setGroups","groups","map","obj","renderGroup","contactgroups","removeGroup","group","current","all","concat","addGroup","addContact","SettingsContactsGroupElement","handleRemove","handleAdd","button","SettingsContactsGroups","SettingsContactsGroupLine","groupId","SettingsContactsGroupForm","SettingsContactsGroupContacts","all_contacts","current_contacts","getContacts","setContacts","renderContact","SettingsContactsGroupContactLine","SettingsContactsHolder","SettingsContacts","SettingsCommandsList","SettingsCommandsMixin","commands","removeCommand","command","SettingsCommandsLine","commandId","SettingsCommandsForm","validateCommandState","SettingsCommandsView","commandgroups","addCommand","SettingsCommandsGroupElement","SettingsCommandsGroups","SettingsCommandsGroupLine","SettingsCommandsGroupForm","SettingsCommandsGroupCommands","all_commands","current_commands","getCommands","setCommands","renderCommand","SettingsCommandsGroupCommandLine","SettingsCommandsHolder","SettingsServersGroups","SettingsServersMixin","servergroups","SettingsServersGroupLine","SettingsServersGroupForm","SettingsServersGroupServers","all_servers","current_servers","getServers","setServers","servers","renderServer","removeServer","server","addServer","SettingsServersGroupServerLine","SettingsServersHolder","SettingsServers","SettingsServersList","SettingsServersLine","serverId","SettingsServersForm","Host","validateUrlState","SettingsServersView","SettingsServersGroupElement","Data","contact_id","server_id","command_id","Router","ReactRouter","Route","DefaultRoute","Redirect","NotFoundRoute","ReactBootstrap","App","setStateOnAuth","Navbar","Nav","NavItem","accessLink","href","brand","fixedTop","fluid","inverse","right","visible","handleDismiss","Alert","onDismiss","NotFound","routes","handler","from","run","Handler","document","body"],"mappings":"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","file":"dashboard.min.js","sourcesContent":["var request = {\n    call : function(method, url, cb) {\n        var r = new XMLHttpRequest();\n        r.open(method, url, true);\n        r.setRequestHeader(\"Content-Type\", \"application/json\");\n        r.setRequestHeader(\"X-Access-Token\", auth.getToken());\n        r.onreadystatechange = function() {\n            if (r.readyState === 4) {\n                if (r.status == 401) {\n                    auth.logout();\n                } else {\n                    data = JSON.parse(r.responseText);\n                    if (cb) {\n                        cb(data);\n                    }\n                }\n            }\n        };\n        return r\n    },\n    remove: function(url, cb) {\n        var r = this.call(\"DELETE\", url, cb);\n        r.send();\n    },\n    get: function(url, cb) {\n        var r = this.call(\"GET\", url, cb);\n        r.send();\n    },\n    patch: function(url, data, cb) {\n        var r = this.call(\"PATH\", url, cb);\n        r.send(JSON.stringify(data));\n    },\n    post: function(url, data, cb) {\n        var r = this.call(\"POST\", url, cb);\n        r.send(JSON.stringify(data));\n    },\n    put: function(url, data, cb) {\n        var r = this.call(\"PUT\", url, cb);\n        r.send(JSON.stringify(data));\n    }\n}\n\nfunction removeFromList(l, o) {\n    var n = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] != o) {\n            n.push(l[i]);\n        }\n    }\n    return n;\n}\n\nfunction removeFromListByKey(l, o) {\n    var n = [];\n    for (var i = 0; i < l.length; i++) {\n        if (parseInt(l[i].key, 10) !== parseInt(o.id, 10)) {\n            n.push(l[i]);\n        }\n    }\n    return n;\n}\n\nfunction excludeByKey(l, o) {\n    var n = [];\n    var k = [];\n    for (var i = 0; i < o.length; i++) {\n        k.push(o[i].key);\n    }\n\n    for (var j = 0; j < l.length; j++) {\n        if (k.indexOf(l[j].key) === -1) {\n            n.push(l[j]);\n        }\n    }\n\n    return n;\n}\n","var AuthenticationMixin = {\n    statics: {\n        willTransitionTo: function(transition) {\n            var nextPath = transition.path;\n            if (!auth.loggedIn()) {\n                transition.redirect(\"/login\", {}, {\"nextPath\": nextPath});\n            }\n        }\n    }\n};\n\nvar Login = React.createClass({\n    contextTypes: {\n        router: React.PropTypes.func.isRequired\n    },\n    getInitialState: function() {\n        return {\n            email: '',\n            password: ''\n        };\n    },\n    getDefaultProps: function() {\n        return {\n            messages: []\n        }\n    },\n    validationEmailState: function() {\n        if (this.state.email.length > 0) {\n            if (validateEmail(this.state.email) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validationPasswordState: function() {\n        if (this.state.password.length > 0) {\n            if (passwordValid(this.state.password)) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            email: this.refs.email.getValue(),\n            password: this.refs.password.getValue()\n        });\n    },\n    handleSubmit: function(event) {\n        event.preventDefault();\n        var { router } = this.context;\n        var nextPath = router.getCurrentQuery().nextPath;\n        // Prevent form being submitted till elements are in valid state\n        auth.login(this.state.email, this.state.password, function(loggedIn) {\n            if (nextPath) {\n                router.replaceWith(nextPath);\n            } else {\n                router.replaceWith(\"/\");\n            }\n        }.bind(this));\n    },\n    render: function() {\n        var msgs = [];\n        this.props.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-3 col-md-offset-5 main\">\n                        {msgs}\n                        <h1 className=\"page-header\">Sign In</h1>\n                        <form onSubmit={this.handleSubmit} className=\"text-left\">\n                            <Input label=\"Email Address\" type=\"email\" ref=\"email\"\n                                   placeholder=\"Enter email\" value={this.state.email}\n                                   autoFocus hasFeedback bsStyle={this.validationEmailState()}\n                                   onChange={this.handleChange} />\n                            <Input label=\"Password\" type=\"password\" ref=\"password\"\n                                   placeholder=\"Password\" value={this.state.password}\n                                   hasFeedback bsStyle={this.validationPasswordState()}\n                                   onChange={this.handleChange} />\n                            <Button type=\"submit\" bsStyle=\"success\">\n                                Sign In\n                            </Button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar Logout = React.createClass({\n    componentDidMount: function() {\n        auth.logout();\n    },\n    render: function() {\n        return (\n            <div className=\"col-md-3 col-md-offset-3\">\n                <h1>Signed Out</h1>\n                <p>You are now signed out!</p>\n            </div>\n        );\n    }\n});\n\nvar auth = {\n    login: function(email, password, cb) {\n        cb = arguments[arguments.length - 1];\n        if (localStorage.token) {\n            if (cb) cb(true);\n            this.onChange(true);\n            return ;\n        }\n        if (email === undefined || password == undefined) {\n            if (cb) cb(false);\n            return ;\n        }\n        authenticate(email, password, function(res) {\n            if (res.authenticated) {\n                localStorage.token = res.token;\n                localStorage.id = res.id;\n                if (cb) cb(true);\n                this.onChange(true, res.errors);\n            } else {\n                if (cb) cb(false);\n                this.onChange(false, res.errors);\n            }\n        }.bind(this));\n    },\n    getToken: function() {\n        return localStorage.token;\n    },\n    logout: function(cb) {\n        logout(localStorage.token);\n        delete localStorage.token;\n        if (cb) cb(false);\n        this.onChange(false);\n    },\n    loggedIn: function() {\n        return !!localStorage.token;\n    },\n    onChange: function() {}\n};\n\nfunction authenticate(email, password, cb) {\n    var r = new XMLHttpRequest();\n    r.open(\"POST\", \"/api/v1/auth/login\", true);\n    r.setRequestHeader(\"Content-Type\", \"application/json\");\n    r.onreadystatechange = function() {\n        if (r.readyState === 4) {\n            data = JSON.parse(r.responseText);\n            if (data.Result === \"success\") {\n                cb({\n                    authenticated: true,\n                    token: r.getResponseHeader(\"X-Access-Token\"),\n                    id: data.data\n                });\n            } else {\n                cb({\n                    authenticated: false,\n                    errors: data.Messages\n                });\n            }\n        }\n    };\n    r.send(JSON.stringify({email: email, password: password}));\n}\n\nfunction logout(token) {\n    var r = new XMLHttpRequest();\n    r.open(\"GET\", \"/api/v1/auth/logout\", true);\n    r.setRequestHeader(\"Content-Type\", \"application/json\");\n    r.setRequestHeader(\"X-Access-Token\", token);\n    r.onreadystatechange = function() {\n        if (r.readyState === 4) {\n            data = JSON.parse(r.responseText);\n            if (data.Result === \"success\") {\n                console.log(\"successfully logged out\");\n            } else {\n                console.log(\"failed to logout!\");\n            }\n        }\n    };\n    r.send();\n}\n","function passwordValid(password) {\n    if (password.length >= 8) {\n        return true;\n    }\n    return false;\n}\n\nfunction validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nfunction validateUrl(url) {\n    var re = /^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$/;\n    return re.test(url);\n}\n\nfunction validateCommand(cmd) {\n    var re = /\\$HOSTADDRESS\\${1}/;\n    return re.test(cmd);\n}\n","var DashboardHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    getInitialState: function() {\n        return {\n            messages: []\n        };\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type=\"error\" message={msg} />);\n        });\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <ul className=\"nav nav-sidebar\">\n                            <li><Link to=\"d_overview\">Overview</Link></li>\n                            <li><Link to=\"d_servers\">Servers</Link></li>\n                            <li><Link to=\"d_apps\">Applications</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        {msgs}\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar DashboardOverview = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Overview...\n            </div>\n        );\n    }\n});\n\nvar DashboardServers = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Servers...\n            </div>\n        );\n    }\n});\n\nvar DashboardApps = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Apps...\n            </div>\n        );\n    }\n});\n","var ProfileHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <h1>Profile</h1>\n                        <ul className=\"nav nav-sidebar\">\n                            <li><Link to=\"p_password\">Password</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\">\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar ProfilePassword = React.createClass({\n    mixins: [AuthenticationMixin],\n    getInitialState: function() {\n        return {\n            password: '',\n            password_confirm: '',\n            messages: []\n        };\n    },\n    validationPasswordState: function() {\n        if (this.state.password.length > 0) {\n            if (passwordValid(this.state.password)) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    validationPasswordConfirmState: function() {\n        if (this.state.password_confirm.length > 0 || this.state.password.length > 0) {\n            if (this.state.password_confirm === this.state.password) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            password: this.refs.password.getValue(),\n            password_confirm: this.refs.password_confirm.getValue()\n        });\n    },\n    handleSubmit: function(event) {\n        event.preventDefault();\n        if (this.state.password.length < 1) {\n            this.setState({\"messages\": [{Type: \"danger\", Content: \"Password is required.\"}]});\n            return ;\n        }\n        if (this.validationPasswordState() !== \"success\" || this.validationPasswordConfirmState() !== \"success\") {\n            this.setState({\"messages\": [{Type: \"danger\", Content: \"Fix errors\"}]});\n            return ;\n        }\n        user.updatePassword(this.state.password, function(success, messages) {\n            if (success === true) {\n                this.setState({messages: messages, password: \"\", password_confirm: \"\"});\n            } else {\n                this.setState({\n                    messages: messages,\n                    password: this.state.password,\n                    password_confirm: this.state.password_confirm\n                });\n                console.log(this.state.messages);\n            }\n        }.bind(this));\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-3\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h1 className=\"page-header\">Reset Password</h1>\n                    {msgs}\n                    <Input label=\"New Password\" type=\"password\" ref=\"password\"\n                           placeholder=\"New password\" value={this.state.password}\n                           autoFocus hasFeedback bsStyle={this.validationPasswordState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Confirm Password\" type=\"password\" ref=\"password_confirm\"\n                           placeholder=\"Confirm Password\" value={this.state.password_confirm}\n                           hasFeedback bsStyle={this.validationPasswordConfirmState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        Update Password\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar user = {\n    updatePassword: function(password, cb) {\n        callback = cb;\n        if (!localStorage.id) {\n            if (callback) callback(false);\n            return ;\n        }\n        if (password.length < 1) {\n            if (callback) callback(false, [\"Password is required.\"]);\n            return ;\n        }\n        request.patch(\n            \"/api/v1/user/\" + localStorage.id,\n            {password: password},\n            this.processPatch\n        )\n    },\n    processPatch: function(res) {\n        if (res.Result == \"success\") {\n            if (callback) callback(true, [{\n                Type: \"success\",\n                Content: \"Successfully updated password.\"\n            }]);\n        } else {\n            if (callback) callback(false, res.errors);\n        }\n    }\n};\n","var settingsSideMenu = {\n    active: function(link) {\n        $(\".nav-sidebar li a\").removeClass(\"active\");\n        var elem = $(\".\" + link + \"-link\");\n        elem.addClass(\"active\");\n    }\n}\n\nvar SettingsHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <h1>Settings</h1>\n                        <ul className=\"nav nav-sidebar\">\n                            <li>\n                                <Link to=\"s_commands_list\"\n                                      className=\"commands-link\">Commands</Link>\n                            </li>\n                            <li>\n                                <Link to=\"s_contacts_list\"\n                                      className=\"contacts-link\">Contacts</Link>\n                            </li>\n                            <li>\n                                <Link to=\"s_servers_list\"\n                                      className=\"servers-link\">Servers</Link>\n                            </li>\n                            <li>\n                                <Link to=\"s_timeperiods\"\n                                      className=\"timeperiods-link\">Time Periods</Link>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        {/*<Messages type=\"success\" message=\"Hello World\" />*/}\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar SettingsCommands = React.createClass({\n    mixins: [AuthenticationMixin],\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n    },\n    render: function() {\n        return (\n            <div>\n                Settings Commands...\n            </div>\n        );\n    }\n});\n\nvar SettingsTimePeriods = React.createClass({\n    mixins: [AuthenticationMixin],\n    componentDidMount: function() {\n        settingsSideMenu.active(\"timeperiods\");\n    },\n    render: function() {\n        return (\n            <div>\n                Settings Time Periods...\n            </div>\n        );\n    }\n});\n","var SettingsContactsList = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    propTypes: {\n        contacts: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            contacts: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        contacts.getAll(function(data, messages) {\n            this.setState({\n                contacts: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeContact: function(contact) {\n        contacts.remove(contact.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            contacts: removeFromList(this.state.contacts, contact)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var contacts = [];\n        this.state.contacts.forEach(function(contact) {\n            contacts.push(\n                <SettingsContactsLine key={contact.id} contact={contact}\n                                      removeContact={this.removeContact} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Individuals</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {contacts}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_contacts_add\" className=\"btn btn-primary\">Add Contact</Link>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeContact(this.props.contact);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_contacts_view\"\n                          params={{contactId: this.props.contact.id}}>\n                    {this.props.contact.name}</Link>\n                </td>\n                <td>{this.props.contact.user.email}</td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_contacts_update\"\n                          params={{\"contactId\": this.props.contact.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsContactsForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            email: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        if (this.props.params.contactId != undefined) {\n            var id = this.props.params.contactId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            contacts.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\", email: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name,\n                email: data.user.email\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validateEmailState: function() {\n        if (this.state.email.length > 0) {\n            if (validateEmail(this.state.email) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n            email: this.refs.email.getValue()\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.state.email.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Email is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\" || this.validateEmailState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            contacts.update(this.state.id, this.state.name, this.state.email,\n                            this.handleFormResponse);\n        } else {\n            contacts.add(this.state.name, this.state.email,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\", email: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name,\n                email: this.state.email\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Contact</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Jane Smart\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Email\" type=\"text\" ref=\"email\"\n                           placeholder=\"test@example.com\" value={this.state.email}\n                           hasFeedback bsStyle={this.validateEmailState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Contact\n                    </Button>\n                    <Link to=\"s_contacts_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsView = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            contact: {},\n            all_groups: [],\n            current_groups: [],\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        contacts.getGroups(\n            this.props.params.contactId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        contact: data,\n                        messages: messages\n                    });\n                    this.setGroups(data.groups.map(function(obj) {\n                        return this.renderGroup(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        contactgroups.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setGroups(undefined, data.map(function(obj) {\n                    return this.renderGroup(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        contactgroups.removeContact(\n            group.id,\n            this.props.params.contactId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_groups,\n                                          group);\n        var all = this.state.all_groups.concat(\n            this.renderGroup(group, \"available\")\n        );\n        this.setGroups(current, all);\n    },\n    addGroup: function(group) {\n        contactgroups.addContact(\n            group.id,\n            this.props.params.contactId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_groups.concat(\n            this.renderGroup(group, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_groups, group);\n        this.setGroups(current, all);\n    },\n    renderGroup: function(group, state) {\n        return (\n            <SettingsContactsGroupElement key={group.id}\n                                          group={group}\n                                          state={state}\n                                          removeGroup={this.removeGroup}\n                                          addGroup={this.addGroup} />\n        )\n    },\n    setGroups: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_groups;\n        }\n        if (all === undefined) {\n            all = this.state.all_groups;\n        }\n        this.setState({\n            all_groups: excludeByKey(all, current),\n            current_groups: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.contact.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Groups</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_contacts_list\"\n                      className=\"btn btn-default\">Back to List of Contacts</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupElement = React.createClass({\n    handleRemove: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    handleAdd: function() {\n        this.props.addGroup(this.props.group);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.group.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsContactsGroups = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    propTypes: {\n        groups: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            groups: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        contactgroups.getAll(function(data, messages) {\n            this.setState({\n                groups: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        contactgroups.remove(group.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            groups: removeFromList(this.state.groups, group)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var groups = [];\n        this.state.groups.forEach(function(group) {\n            groups.push(\n                <SettingsContactsGroupLine key={group.id} group={group}\n                                           removeGroup={this.removeGroup} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Groups</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {groups}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_contacts_group_add\"\n                      className=\"btn btn-primary\">Add Group</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_contacts_group_contacts\"\n                          params={{\"groupId\": this.props.group.id}}\n                          >{this.props.group.name}</Link>\n                </td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_contacts_group_update\"\n                          params={{\"groupId\": this.props.group.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsContactsGroupForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        if (this.props.params.groupId != undefined) {\n            var id = this.props.params.groupId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            contactgroups.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            contactgroups.update(this.state.id, this.state.name,\n                            this.handleFormResponse);\n        } else {\n            contactgroups.add(this.state.name,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Contact Group</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Admins\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Contact Group\n                    </Button>\n                    <Link to=\"s_contacts_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsGroupContacts = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            group: {},\n            messages: [],\n            all_contacts: [],\n            current_contacts: []\n        };\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        contactgroups.getContacts(\n            this.props.params.groupId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        group: data,\n                        messages: messages\n                    });\n                    this.setContacts(data.contacts.map(function(obj) {\n                        return this.renderContact(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        contacts.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setContacts(undefined, data.map(function(obj) {\n                    return this.renderContact(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeContact: function(contact) {\n        contactgroups.removeContact(\n            this.props.params.groupId,\n            contact.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_contacts,\n                                          contact);\n        var all = this.state.all_contacts.concat(\n            this.renderContact(contact, \"available\")\n        );\n        this.setContacts(current, all);\n    },\n    addContact: function(contact) {\n        contactgroups.addContact(\n            this.props.params.groupId,\n            contact.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_contacts.concat(\n            this.renderContact(contact, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_contacts, contact);\n        this.setContacts(current, all);\n    },\n    renderContact: function(contact, state) {\n        return (\n            <SettingsContactsGroupContactLine key={contact.id}\n                                              contact={contact}\n                                              state={state}\n                                              removeContact={this.removeContact}\n                                              addContact={this.addContact} />\n        )\n    },\n    setContacts: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_contacts;\n        }\n        if (all === undefined) {\n            all = this.state.all_contacts;\n        }\n        this.setState({\n            all_contacts: excludeByKey(all, current),\n            current_contacts: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return(\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.group.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_contacts}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Contacts</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_contacts}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_contacts_list\"\n                      className=\"btn btn-default\">Back to Contacts</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupContactLine = React.createClass({\n    handleRemove: function() {\n        this.props.removeContact(this.props.contact);\n    },\n    handleAdd: function() {\n        this.props.addContact(this.props.contact);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.contact.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.contact.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.contact.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsContactsMixin = {\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n    }\n};\n\nvar SettingsContactsHolder = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    render: function() {\n        return (\n            <div>\n                <h1 className=\"page-header\">Contacts</h1>\n                <RouteHandler />\n            </div>\n        );\n    }\n});\n\nvar SettingsContacts = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    render: function() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <SettingsContactsGroups />\n                </div>\n                <div className=\"col-md-6\">\n                    <SettingsContactsList />\n                </div>\n            </div>\n        )\n    }\n});\n","var SettingsCommandsList = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    propTypes: {\n        commands: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            commands: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        commands.getAll(function(data, messages) {\n            this.setState({\n                commands: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeCommand: function(command) {\n        commands.remove(command.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            commands: removeFromList(this.state.commands, command)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var commands = [];\n        this.state.commands.forEach(function(command) {\n            commands.push(\n                <SettingsCommandsLine key={command.id} command={command}\n                                      removeCommand={this.removeCommand} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Commands</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Command</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {commands}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_commands_add\" className=\"btn btn-primary\">Add Command</Link>\n            </div>\n        );\n    }\n});\n\nvar SettingsCommandsLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeCommand(this.props.command);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_commands_view\"\n                          params={{commandId: this.props.command.id}}>\n                    {this.props.command.name}</Link>\n                </td>\n                <td>{this.props.command.command}</td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_commands_update\"\n                          params={{\"commandId\": this.props.command.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsCommandsForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            command: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n        if (this.props.params.commandId != undefined) {\n            var id = this.props.params.commandId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            commands.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\", command: \"\"});\n        } else {\n            console.log(data);\n            this.setState({\n                messages: messages,\n                name: data.name,\n                command: data.command\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validateCommandState: function() {\n        if (this.state.command.length > 0) {\n            if (validateCommand(this.state.command) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n            command: this.refs.command.getValue()\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.state.command.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Command is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\" || this.validateCommandState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            commands.update(this.state.id, this.state.name, this.state.command,\n                            this.handleFormResponse);\n        } else {\n            commands.add(this.state.name, this.state.command,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\", command: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name,\n                command: this.state.command\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Command</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Ping\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Command\" type=\"text\" ref=\"command\"\n                           placeholder=\"/path/command $HOSTADDRESS$ $ARG1$\"\n                           value={this.state.command} hasFeedback\n                           bsStyle={this.validateCommandState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Command\n                    </Button>\n                    <Link to=\"s_commands_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsCommandsView = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    getInitialState: function() {\n        return {\n            command: {},\n            all_groups: [],\n            current_groups: [],\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n        commands.getGroups(\n            this.props.params.commandId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        command: data,\n                        messages: messages\n                    });\n                    this.setGroups(data.groups.map(function(obj) {\n                        return this.renderGroup(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        commandgroups.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setGroups(undefined, data.map(function(obj) {\n                    return this.renderGroup(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        commandgroups.removeCommand(\n            group.id,\n            this.props.params.commandId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_groups,\n                                          group);\n        var all = this.state.all_groups.concat(\n            this.renderGroup(group, \"available\")\n        );\n        this.setGroups(current, all);\n    },\n    addGroup: function(group) {\n        commandgroups.addCommand(\n            group.id,\n            this.props.params.commandId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_groups.concat(\n            this.renderGroup(group, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_groups, group);\n        this.setGroups(current, all);\n    },\n    renderGroup: function(group, state) {\n        return (\n            <SettingsCommandsGroupElement key={group.id}\n                                          group={group}\n                                          state={state}\n                                          removeGroup={this.removeGroup}\n                                          addGroup={this.addGroup} />\n        )\n    },\n    setGroups: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_groups;\n        }\n        if (all === undefined) {\n            all = this.state.all_groups;\n        }\n        this.setState({\n            all_groups: excludeByKey(all, current),\n            current_groups: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.command.name} <small>({this.state.command.command})</small></h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Groups</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_commands_list\"\n                      className=\"btn btn-default\">Back to List of Commands</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsCommandsGroupElement = React.createClass({\n    handleRemove: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    handleAdd: function() {\n        this.props.addGroup(this.props.group);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.group.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsCommandsGroups = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    propTypes: {\n        groups: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            groups: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        commandgroups.getAll(function(data, messages) {\n            this.setState({\n                groups: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        commandgroups.remove(group.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            groups: removeFromList(this.state.groups, group)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var groups = [];\n        this.state.groups.forEach(function(group) {\n            groups.push(\n                <SettingsCommandsGroupLine key={group.id} group={group}\n                                           removeGroup={this.removeGroup} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Groups</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {groups}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_commands_group_add\"\n                      className=\"btn btn-primary\">Add Group</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsCommandsGroupLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_commands_group_commands\"\n                          params={{\"groupId\": this.props.group.id}}\n                          >{this.props.group.name}</Link>\n                </td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_commands_group_update\"\n                          params={{\"groupId\": this.props.group.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsCommandsGroupForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n        if (this.props.params.groupId != undefined) {\n            var id = this.props.params.groupId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            commandgroups.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            commandgroups.update(this.state.id, this.state.name,\n                            this.handleFormResponse);\n        } else {\n            commandgroups.add(this.state.name,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Command Group</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Database Commands\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Command Group\n                    </Button>\n                    <Link to=\"s_commands_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsCommandsGroupCommands = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    getInitialState: function() {\n        return {\n            group: {},\n            messages: [],\n            all_commands: [],\n            current_commands: []\n        };\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n        commandgroups.getCommands(\n            this.props.params.groupId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        group: data,\n                        messages: messages\n                    });\n                    this.setCommands(data.commands.map(function(obj) {\n                        return this.renderCommand(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        commands.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setCommands(undefined, data.map(function(obj) {\n                    return this.renderCommand(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeCommand: function(command) {\n        commandgroups.removeCommand(\n            this.props.params.groupId,\n            command.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_commands,\n                                          command);\n        var all = this.state.all_commands.concat(\n            this.renderCommand(command, \"available\")\n        );\n        this.setCommands(current, all);\n    },\n    addCommand: function(command) {\n        commandgroups.addCommand(\n            this.props.params.groupId,\n            command.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_commands.concat(\n            this.renderCommand(command, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_commands, command);\n        this.setCommands(current, all);\n    },\n    renderCommand: function(command, state) {\n        return (\n            <SettingsCommandsGroupCommandLine key={command.id}\n                                              command={command}\n                                              state={state}\n                                              removeCommand={this.removeCommand}\n                                              addCommand={this.addCommand} />\n        )\n    },\n    setCommands: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_commands;\n        }\n        if (all === undefined) {\n            all = this.state.all_commands;\n        }\n        this.setState({\n            all_commands: excludeByKey(all, current),\n            current_commands: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return(\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.group.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_commands}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Commands</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_commands}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_commands_list\"\n                      className=\"btn btn-default\">Back to Commands</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsCommandsGroupCommandLine = React.createClass({\n    handleRemove: function() {\n        this.props.removeCommand(this.props.command);\n    },\n    handleAdd: function() {\n        this.props.addCommand(this.props.command);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.command.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.command.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.command.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsCommandsMixin = {\n    componentDidMount: function() {\n        settingsSideMenu.active(\"commands\");\n    }\n};\n\nvar SettingsCommandsHolder = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    render: function() {\n        return (\n            <div>\n                <h1 className=\"page-header\">Commands</h1>\n                <RouteHandler />\n            </div>\n        );\n    }\n});\n\nvar SettingsCommands = React.createClass({\n    mixins: [AuthenticationMixin, SettingsCommandsMixin],\n    render: function() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <SettingsCommandsGroups />\n                </div>\n                <div className=\"col-md-6\">\n                    <SettingsCommandsList />\n                </div>\n            </div>\n        )\n    }\n});\n","var SettingsServersGroups = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    propTypes: {\n        groups: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            groups: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        servergroups.getAll(function(data, messages) {\n            this.setState({\n                groups: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        servergroups.remove(group.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            groups: removeFromList(this.state.groups, group)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var groups = [];\n        this.state.groups.forEach(function(group) {\n            groups.push(\n                <SettingsServersGroupLine key={group.id} group={group}\n                                           removeGroup={this.removeGroup} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Groups</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {groups}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_servers_group_add\"\n                      className=\"btn btn-primary\">Add Group</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsServersGroupLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_servers_group_servers\"\n                          params={{\"groupId\": this.props.group.id}}\n                          >{this.props.group.name}</Link>\n                </td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_servers_group_update\"\n                          params={{\"groupId\": this.props.group.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsServersGroupForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"servers\");\n        if (this.props.params.groupId != undefined) {\n            var id = this.props.params.groupId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            servergroups.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            servergroups.update(this.state.id, this.state.name,\n                            this.handleFormResponse);\n        } else {\n            servergroups.add(this.state.name,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Server Group</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Database Servers\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Server Group\n                    </Button>\n                    <Link to=\"s_servers_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsServersGroupServers = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    getInitialState: function() {\n        return {\n            group: {},\n            messages: [],\n            all_servers: [],\n            current_servers: []\n        };\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"servers\");\n        servergroups.getServers(\n            this.props.params.groupId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        group: data,\n                        messages: messages\n                    });\n                    this.setServers(data.servers.map(function(obj) {\n                        return this.renderServer(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        servers.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setServers(undefined, data.map(function(obj) {\n                    return this.renderServer(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeServer: function(server) {\n        servergroups.removeServer(\n            this.props.params.groupId,\n            server.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_servers,\n                                          server);\n        var all = this.state.all_servers.concat(\n            this.renderServer(server, \"available\")\n        );\n        this.setServers(current, all);\n    },\n    addServer: function(server) {\n        servergroups.addServer(\n            this.props.params.groupId,\n            server.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_servers.concat(\n            this.renderServer(server, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_servers, server);\n        this.setServers(current, all);\n    },\n    renderServer: function(server, state) {\n        return (\n            <SettingsServersGroupServerLine key={server.id}\n                                              server={server}\n                                              state={state}\n                                              removeServer={this.removeServer}\n                                              addServer={this.addServer} />\n        )\n    },\n    setServers: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_servers;\n        }\n        if (all === undefined) {\n            all = this.state.all_servers;\n        }\n        this.setState({\n            all_servers: excludeByKey(all, current),\n            current_servers: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return(\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.group.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_servers}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Servers</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_servers}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_servers_list\"\n                      className=\"btn btn-default\">Back to Servers</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsServersGroupServerLine = React.createClass({\n    handleRemove: function() {\n        this.props.removeServer(this.props.server);\n    },\n    handleAdd: function() {\n        this.props.addServer(this.props.server);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.server.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.server.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.server.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsServersMixin = {\n    componentDidMount: function() {\n        settingsSideMenu.active(\"servers\");\n    }\n};\n\nvar SettingsServersHolder = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    render: function() {\n        return (\n            <div>\n                <h1 className=\"page-header\">Servers</h1>\n                <RouteHandler />\n            </div>\n        );\n    }\n});\n\nvar SettingsServers = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    render: function() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <SettingsServersGroups />\n                </div>\n                <div className=\"col-md-6\">\n                    <SettingsServersList />\n                </div>\n            </div>\n        )\n    }\n});\n","var SettingsServersList = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    propTypes: {\n        servers: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            servers: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        servers.getAll(function(data, messages) {\n            this.setState({\n                servers: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeServer: function(server) {\n        servers.remove(server.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            servers: removeFromList(this.state.servers, server)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var servers = [];\n        this.state.servers.forEach(function(server) {\n            servers.push(\n                <SettingsServersLine key={server.id} server={server}\n                                      removeServer={this.removeServer} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Servers</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Address</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {servers}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_servers_add\" className=\"btn btn-primary\">Add Server</Link>\n            </div>\n        );\n    }\n});\n\nvar SettingsServersLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeServer(this.props.server);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_servers_view\"\n                          params={{serverId: this.props.server.id}}>\n                    {this.props.server.name}</Link>\n                </td>\n                <td>{this.props.server.url}</td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_servers_update\"\n                          params={{\"serverId\": this.props.server.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsServersForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            url: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"servers\");\n        if (this.props.params.serverId != undefined) {\n            var id = this.props.params.serverId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            servers.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\", url: \"\"});\n        } else {\n            console.log(data);\n            this.setState({\n                messages: messages,\n                name: data.name,\n                url: data.url.Host\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validateUrlState: function() {\n        if (this.state.url.length > 0) {\n            if (validateUrl(this.state.url) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n            url: this.refs.url.getValue()\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.state.url.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Address is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\" || this.validateUrlState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            servers.update(this.state.id, this.state.name, this.state.url,\n                            this.handleFormResponse);\n        } else {\n            servers.add(this.state.name, this.state.url,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\", url: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name,\n                url: this.state.url\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Server</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"LAMP Server\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Address\" type=\"text\" ref=\"url\"\n                           placeholder=\"127.0.0.1\" value={this.state.url}\n                           hasFeedback bsStyle={this.validateUrlState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Server\n                    </Button>\n                    <Link to=\"s_servers_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsServersView = React.createClass({\n    mixins: [AuthenticationMixin, SettingsServersMixin],\n    getInitialState: function() {\n        return {\n            server: {},\n            all_groups: [],\n            current_groups: [],\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"servers\");\n        servers.getGroups(\n            this.props.params.serverId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        server: data,\n                        messages: messages\n                    });\n                    this.setGroups(data.groups.map(function(obj) {\n                        return this.renderGroup(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        servergroups.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setGroups(undefined, data.map(function(obj) {\n                    return this.renderGroup(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        servergroups.removeServer(\n            group.id,\n            this.props.params.serverId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_groups,\n                                          group);\n        var all = this.state.all_groups.concat(\n            this.renderGroup(group, \"available\")\n        );\n        this.setGroups(current, all);\n    },\n    addGroup: function(group) {\n        servergroups.addServer(\n            group.id,\n            this.props.params.serverId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_groups.concat(\n            this.renderGroup(group, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_groups, group);\n        this.setGroups(current, all);\n    },\n    renderGroup: function(group, state) {\n        return (\n            <SettingsServersGroupElement key={group.id}\n                                          group={group}\n                                          state={state}\n                                          removeGroup={this.removeGroup}\n                                          addGroup={this.addGroup} />\n        )\n    },\n    setGroups: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_groups;\n        }\n        if (all === undefined) {\n            all = this.state.all_groups;\n        }\n        this.setState({\n            all_groups: excludeByKey(all, current),\n            current_groups: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.server.name} <small>({this.state.server.url})</small></h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Groups</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_servers_list\"\n                      className=\"btn btn-default\">Back to List of Servers</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsServersGroupElement = React.createClass({\n    handleRemove: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    handleAdd: function() {\n        this.props.addGroup(this.props.group);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.group.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var contacts = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/contacts/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/contacts/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, email, cb) {\n        request.post(\n            \"/api/v1/contacts/\",\n            {name: name, email: email},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/contacts/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, email, cb) {\n        request.put(\n            \"/api/v1/contacts/\" + id,\n            {name: name, email: email},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getGroups: function(id, cb) {\n        request.get(\n            \"/api/v1/contacts/\" + id + \"/groups/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n}\n","var contactgroups = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/contacts/groups/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/contacts/groups/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, cb) {\n        request.post(\n            \"/api/v1/contacts/groups/\",\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/contacts/groups/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, cb) {\n        request.put(\n            \"/api/v1/contacts/groups/\" + id,\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getContacts: function(id, cb) {\n        request.get(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n    addContact: function(id, contact_id, cb) {\n        request.post(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\",\n            {id: parseInt(contact_id, 10)},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact to group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    removeContact: function(id, contact_id, cb) {\n        request.remove(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\" + contact_id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact from group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    }\n}\n","var servergroups = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/servers/groups/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/servers/groups/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, cb) {\n        request.post(\n            \"/api/v1/servers/groups/\",\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added server group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/servers/groups/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed server group.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, cb) {\n        request.put(\n            \"/api/v1/servers/groups/\" + id,\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated server group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getServers: function(id, cb) {\n        request.get(\n            \"/api/v1/servers/groups/\" + id + \"/servers/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n    addServer: function(id, server_id, cb) {\n        request.post(\n            \"/api/v1/servers/groups/\" + id + \"/servers/\",\n            {id: parseInt(server_id, 10)},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully added server to group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    removeServer: function(id, server_id, cb) {\n        request.remove(\n            \"/api/v1/servers/groups/\" + id + \"/servers/\" + server_id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully removed server from group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    }\n}\n","var servers = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/servers/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/servers/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, url, cb) {\n        request.post(\n            \"/api/v1/servers/\",\n            {name: name, url: url},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added server.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/servers/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed server.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, url, cb) {\n        request.put(\n            \"/api/v1/servers/\" + id,\n            {name: name, url: url},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated server.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getGroups: function(id, cb) {\n        request.get(\n            \"/api/v1/servers/\" + id + \"/groups/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n}\n","var commands = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/commands/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/commands/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, command, cb) {\n        request.post(\n            \"/api/v1/commands/\",\n            {name: name, command: command},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added command.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/commands/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed command.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, command, cb) {\n        request.put(\n            \"/api/v1/commands/\" + id,\n            {name: name, command: command},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated command.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getGroups: function(id, cb) {\n        request.get(\n            \"/api/v1/commands/\" + id + \"/groups/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n}\n","var commandgroups = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/commands/groups/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/commands/groups/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, cb) {\n        request.post(\n            \"/api/v1/commands/groups/\",\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added command group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/commands/groups/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed command group.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, cb) {\n        request.put(\n            \"/api/v1/commands/groups/\" + id,\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated command group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getCommands: function(id, cb) {\n        request.get(\n            \"/api/v1/commands/groups/\" + id + \"/commands/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n    addCommand: function(id, command_id, cb) {\n        request.post(\n            \"/api/v1/commands/groups/\" + id + \"/commands/\",\n            {id: parseInt(command_id, 10)},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully added command to group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    removeCommand: function(id, command_id, cb) {\n        request.remove(\n            \"/api/v1/commands/groups/\" + id + \"/commands/\" + command_id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully removed command from group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    }\n}\n","var Router = ReactRouter,\n    Route = Router.Route,\n    Link = Router.Link,\n    RouteHandler = Router.RouteHandler,\n    DefaultRoute = Router.DefaultRoute,\n    Redirect = Router.Redirect,\n    NotFoundRoute = Router.NotFoundRoute,\n\n    // bootstrap\n    Input = ReactBootstrap.Input,\n    Button = ReactBootstrap.Button,\n    Table = ReactBootstrap.Table;\n\nvar App = React.createClass({\n    getInitialState: function() {\n        return {\n            loggedIn: auth.loggedIn(),\n            messages: []\n        };\n    },\n    setStateOnAuth: function(loggedIn, messages) {\n        this.setState({loggedIn: loggedIn, messages: messages});\n    },\n    componentWillMount: function() {\n        auth.onChange = this.setStateOnAuth;\n        auth.login();\n    },\n    render: function() {\n        var Navbar = ReactBootstrap.Navbar,\n            Nav = ReactBootstrap.Nav,\n            NavItem = ReactBootstrap.NavItem;\n        if (this.state.loggedIn) {\n            accessLink = <NavItem href=\"#/logout\">Sign Out</NavItem>;\n        } else {\n            accessLink = <NavItem href=\"#/login\">Sign In</NavItem>;\n        }\n        return (\n            <div>\n                <Navbar brand=\"ZenPager\" fixedTop fluid inverse>\n                    <Nav right>\n                        <NavItem href=\"#/dashboard\">Dashboard</NavItem>\n                        <NavItem href=\"#/settings\">Settings</NavItem>\n                        <NavItem href=\"#/profile\">Profile</NavItem>\n                        {accessLink}\n                    </Nav>\n                </Navbar>\n                <RouteHandler messages={this.state.messages} />\n            </div>\n        );\n    }\n});\n\nvar Messages = React.createClass({\n    getInitialState: function() {\n        return {\n            visible: true\n        };\n    },\n    handleDismiss: function() {\n        this.setState({visible: false});\n    },\n    render: function() {\n        if (this.state.visible) {\n            var Alert = ReactBootstrap.Alert;\n            return (\n                <Alert bsStyle={this.props.type}\n                       onDismiss={this.handleDismiss}>\n                    {this.props.message}\n                </Alert>\n            );\n        }\n        return <div></div>;\n    }\n});\n\nvar NotFound = React.createClass({\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        <h1>404 Not Found</h1>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar routes = (\n    <Route name=\"app\" path=\"/\" handler={App}>\n        <NotFoundRoute handler={NotFound} />\n        <Route name=\"login\" handler={Login} />\n        <Route name=\"logout\" handler={Logout} />\n        <Route name=\"dashboard\" handler={DashboardHolder}>\n            <Route name=\"d_overview\" path=\"overview\"\n                   handler={DashboardOverview} />\n            <Route name=\"d_servers\" path=\"servers\"\n                   handler={DashboardServers} />\n            <Route name=\"d_apps\" path=\"apps\" handler={DashboardApps} />\n            <Redirect from=\"/dashboard\" to=\"d_overview\" />\n        </Route>\n        // Settings\n        <Route name=\"settings\" handler={SettingsHolder}>\n            // Commands\n            <Route name=\"commands\" handler={SettingsCommandsHolder}>\n                <Route name=\"s_commands_list\" path=\"list\"\n                       handler={SettingsCommands} />\n                <Route name=\"s_commands_add\" path=\"add\"\n                       handler={SettingsCommandsForm} />\n                <Route name=\"s_commands_update\" path=\"update/:commandId\"\n                       handler={SettingsCommandsForm} />\n                <Route name=\"s_commands_view\" path=\":commandId\"\n                       handler={SettingsCommandsView} />\n                <Route name=\"s_commands_group_add\" path=\"group/add\"\n                       handler={SettingsCommandsGroupForm} />\n                <Route name=\"s_commands_group_update\"\n                       path=\"group/update/:groupId\"\n                       handler={SettingsCommandsGroupForm} />\n                <Route name=\"s_commands_group_commands\" path=\"group/:groupId\"\n                       handler={SettingsCommandsGroupCommands} />\n                <Redirect from=\"/commands\" to=\"s_commands_list\" />\n            </Route>\n            // Contacts\n            <Route name=\"contacts\" handler={SettingsContactsHolder}>\n                <Route name=\"s_contacts_list\" path=\"list\"\n                       handler={SettingsContacts} />\n                <Route name=\"s_contacts_add\" path=\"add\"\n                       handler={SettingsContactsForm} />\n                <Route name=\"s_contacts_update\" path=\"update/:contactId\"\n                       handler={SettingsContactsForm} />\n                <Route name=\"s_contacts_view\" path=\":contactId\"\n                       handler={SettingsContactsView} />\n                <Route name=\"s_contacts_group_add\" path=\"group/add\"\n                       handler={SettingsContactsGroupForm} />\n                <Route name=\"s_contacts_group_update\"\n                       path=\"group/update/:groupId\"\n                       handler={SettingsContactsGroupForm} />\n                <Route name=\"s_contacts_group_contacts\" path=\"group/:groupId\"\n                       handler={SettingsContactsGroupContacts} />\n                <Redirect from=\"/contacts\" to=\"s_contacts_list\" />\n            </Route>\n            // Servers\n            <Route name=\"servers\" handler={SettingsServersHolder}>\n                <Route name=\"s_servers_list\" path=\"list\"\n                       handler={SettingsServers} />\n                <Route name=\"s_servers_add\" path=\"add\"\n                       handler={SettingsServersForm} />\n                <Route name=\"s_servers_update\" path=\"update/:serverId\"\n                       handler={SettingsServersForm} />\n                <Route name=\"s_servers_view\" path=\":serverId\"\n                       handler={SettingsServersView} />\n                <Route name=\"s_servers_group_add\" path=\"group/add\"\n                       handler={SettingsServersGroupForm} />\n                <Route name=\"s_servers_group_update\"\n                       path=\"group/update/:groupId\"\n                       handler={SettingsServersGroupForm} />\n                <Route name=\"s_servers_group_servers\" path=\"group/:groupId\"\n                       handler={SettingsServersGroupServers} />\n                <Redirect from=\"/servers\" to=\"s_servers_list\" />\n            </Route>\n            <Route name=\"s_timeperiods\" path=\"timeperiods\"\n                   handler={SettingsTimePeriods} />\n            <Redirect from=\"/settings\" to=\"s_commands_list\" />\n        </Route>\n        <Route name=\"profile\" handler={ProfileHolder}>\n            <Route name=\"p_password\" path=\"password\"\n                   handler={ProfilePassword} />\n            <Redirect from=\"/profile\" to=\"p_password\" />\n        </Route>\n        <Redirect from=\"/\" to=\"d_overview\" />\n    </Route>\n);\n\nRouter.run(routes, function(Handler) {\n    React.render(<Handler />, document.body);\n});\n"],"sourceRoot":"/source/"}