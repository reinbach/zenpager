{"version":3,"sources":["utils.jsx","auth.jsx","validation.jsx","dashboard.jsx","profile.jsx","holder.jsx","contacts/contacts.jsx","contacts/groups.jsx","contacts/holder.jsx","contacts/libs/contacts.jsx","contacts/libs/groups.jsx","main.jsx"],"names":["removeFromList","l","o","n","i","length","push","removeFromListByKey","parseInt","key","id","excludeByKey","k","j","indexOf","authenticate","email","password","cb","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","data","JSON","parse","responseText","Result","authenticated","token","getResponseHeader","errors","Messages","send","stringify","logout","console","log","passwordValid","validateEmail","re","test","request","call","method","url","auth","getToken","status","remove","this","get","patch","post","put","AuthenticationMixin","statics","willTransitionTo","transition","nextPath","path","loggedIn","redirect","Login","React","createClass","displayName","contextTypes","router","PropTypes","func","isRequired","getInitialState","getDefaultProps","messages","validationEmailState","state","validationPasswordState","handleChange","setState","refs","getValue","handleSubmit","event","preventDefault","$__0","context","getCurrentQuery","login","replaceWith","bind","render","msgs","props","forEach","msg","createElement","type","Type","message","Content","className","onSubmit","Input","label","ref","placeholder","value","autoFocus","hasFeedback","bsStyle","onChange","Button","Logout","componentDidMount","arguments","localStorage","undefined","res","DashboardHolder","mixins","Link","to","RouteHandler","DashboardOverview","DashboardServers","DashboardApps","ProfileHolder","ProfilePassword","password_confirm","validationPasswordConfirmState","user","updatePassword","success","callback","processPatch","settingsSideMenu","active","link","$","removeClass","elem","addClass","SettingsHolder","SettingsCommands","SettingsServers","SettingsTimePeriods","SettingsContactsList","SettingsContactsMixin","propTypes","contacts","array","componentWillMount","getAll","removeContact","contact","SettingsContactsLine","Table","striped","hover","handleDelete","params","contactId","name","bsSize","onClick","SettingsContactsForm","action","handleGet","validateNameState","validateEmailState","update","handleFormResponse","add","SettingsContactsView","all_groups","current_groups","getGroups","isMounted","setGroups","groups","map","obj","renderGroup","contactgroups","removeGroup","group","current","all","concat","addGroup","addContact","SettingsContactsGroupElement","handleRemove","handleAdd","button","SettingsContactsGroups","SettingsContactsGroupLine","groupId","SettingsContactsGroupForm","SettingsContactsGroupContacts","all_contacts","current_contacts","getContacts","setContacts","renderContact","SettingsContactsGroupContactLine","SettingsContactsHolder","SettingsContacts","Data","contact_id","Router","ReactRouter","Route","DefaultRoute","Redirect","NotFoundRoute","ReactBootstrap","App","setStateOnAuth","Navbar","Nav","NavItem","accessLink","href","brand","fixedTop","fluid","inverse","right","visible","handleDismiss","Alert","onDismiss","NotFound","routes","handler","from","run","Handler","document","body"],"mappings":"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","file":"dashboard.min.js","sourcesContent":["var request = {\n    call : function(method, url, cb) {\n        var r = new XMLHttpRequest();\n        r.open(method, url, true);\n        r.setRequestHeader(\"Content-Type\", \"application/json\");\n        r.setRequestHeader(\"X-Access-Token\", auth.getToken());\n        r.onreadystatechange = function() {\n            if (r.readyState === 4) {\n                if (r.status == 401) {\n                    auth.logout();\n                } else {\n                    data = JSON.parse(r.responseText);\n                    if (cb) {\n                        cb(data);\n                    }\n                }\n            }\n        };\n        return r\n    },\n    remove: function(url, cb) {\n        var r = this.call(\"DELETE\", url, cb);\n        r.send();\n    },\n    get: function(url, cb) {\n        var r = this.call(\"GET\", url, cb);\n        r.send();\n    },\n    patch: function(url, data, cb) {\n        var r = this.call(\"PATH\", url, cb);\n        r.send(JSON.stringify(data));\n    },\n    post: function(url, data, cb) {\n        var r = this.call(\"POST\", url, cb);\n        r.send(JSON.stringify(data));\n    },\n    put: function(url, data, cb) {\n        var r = this.call(\"PUT\", url, cb);\n        r.send(JSON.stringify(data));\n    }\n}\n\nfunction removeFromList(l, o) {\n    var n = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] != o) {\n            n.push(l[i]);\n        }\n    }\n    return n;\n}\n\nfunction removeFromListByKey(l, o) {\n    var n = [];\n    for (var i = 0; i < l.length; i++) {\n        if (parseInt(l[i].key, 10) !== parseInt(o.id, 10)) {\n            n.push(l[i]);\n        }\n    }\n    return n;\n}\n\nfunction excludeByKey(l, o) {\n    var n = [];\n    var k = [];\n    for (var i = 0; i < o.length; i++) {\n        k.push(o[i].key);\n    }\n\n    for (var j = 0; j < l.length; j++) {\n        if (k.indexOf(l[j].key) === -1) {\n            n.push(l[j]);\n        }\n    }\n\n    return n;\n}\n","var AuthenticationMixin = {\n    statics: {\n        willTransitionTo: function(transition) {\n            var nextPath = transition.path;\n            if (!auth.loggedIn()) {\n                transition.redirect(\"/login\", {}, {\"nextPath\": nextPath});\n            }\n        }\n    }\n};\n\nvar Login = React.createClass({\n    contextTypes: {\n        router: React.PropTypes.func.isRequired\n    },\n    getInitialState: function() {\n        return {\n            email: '',\n            password: ''\n        };\n    },\n    getDefaultProps: function() {\n        return {\n            messages: []\n        }\n    },\n    validationEmailState: function() {\n        if (this.state.email.length > 0) {\n            if (validateEmail(this.state.email) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validationPasswordState: function() {\n        if (this.state.password.length > 0) {\n            if (passwordValid(this.state.password)) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            email: this.refs.email.getValue(),\n            password: this.refs.password.getValue()\n        });\n    },\n    handleSubmit: function(event) {\n        event.preventDefault();\n        var { router } = this.context;\n        var nextPath = router.getCurrentQuery().nextPath;\n        // Prevent form being submitted till elements are in valid state\n        auth.login(this.state.email, this.state.password, function(loggedIn) {\n            if (nextPath) {\n                router.replaceWith(nextPath);\n            } else {\n                router.replaceWith(\"/\");\n            }\n        }.bind(this));\n    },\n    render: function() {\n        var msgs = [];\n        this.props.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-3 col-md-offset-5 main\">\n                        {msgs}\n                        <h1 className=\"page-header\">Sign In</h1>\n                        <form onSubmit={this.handleSubmit} className=\"text-left\">\n                            <Input label=\"Email Address\" type=\"email\" ref=\"email\"\n                                   placeholder=\"Enter email\" value={this.state.email}\n                                   autoFocus hasFeedback bsStyle={this.validationEmailState()}\n                                   onChange={this.handleChange} />\n                            <Input label=\"Password\" type=\"password\" ref=\"password\"\n                                   placeholder=\"Password\" value={this.state.password}\n                                   hasFeedback bsStyle={this.validationPasswordState()}\n                                   onChange={this.handleChange} />\n                            <Button type=\"submit\" bsStyle=\"success\">\n                                Sign In\n                            </Button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar Logout = React.createClass({\n    componentDidMount: function() {\n        auth.logout();\n    },\n    render: function() {\n        return (\n            <div className=\"col-md-3 col-md-offset-3\">\n                <h1>Signed Out</h1>\n                <p>You are now signed out!</p>\n            </div>\n        );\n    }\n});\n\nvar auth = {\n    login: function(email, password, cb) {\n        cb = arguments[arguments.length - 1];\n        if (localStorage.token) {\n            if (cb) cb(true);\n            this.onChange(true);\n            return ;\n        }\n        if (email === undefined || password == undefined) {\n            if (cb) cb(false);\n            return ;\n        }\n        authenticate(email, password, function(res) {\n            if (res.authenticated) {\n                localStorage.token = res.token;\n                localStorage.id = res.id;\n                if (cb) cb(true);\n                this.onChange(true, res.errors);\n            } else {\n                if (cb) cb(false);\n                this.onChange(false, res.errors);\n            }\n        }.bind(this));\n    },\n    getToken: function() {\n        return localStorage.token;\n    },\n    logout: function(cb) {\n        logout(localStorage.token);\n        delete localStorage.token;\n        if (cb) cb(false);\n        this.onChange(false);\n    },\n    loggedIn: function() {\n        return !!localStorage.token;\n    },\n    onChange: function() {}\n};\n\nfunction authenticate(email, password, cb) {\n    var r = new XMLHttpRequest();\n    r.open(\"POST\", \"/api/v1/auth/login\", true);\n    r.setRequestHeader(\"Content-Type\", \"application/json\");\n    r.onreadystatechange = function() {\n        if (r.readyState === 4) {\n            data = JSON.parse(r.responseText);\n            if (data.Result === \"success\") {\n                cb({\n                    authenticated: true,\n                    token: r.getResponseHeader(\"X-Access-Token\"),\n                    id: data.data\n                });\n            } else {\n                cb({\n                    authenticated: false,\n                    errors: data.Messages\n                });\n            }\n        }\n    };\n    r.send(JSON.stringify({email: email, password: password}));\n}\n\nfunction logout(token) {\n    var r = new XMLHttpRequest();\n    r.open(\"GET\", \"/api/v1/auth/logout\", true);\n    r.setRequestHeader(\"Content-Type\", \"application/json\");\n    r.setRequestHeader(\"X-Access-Token\", token);\n    r.onreadystatechange = function() {\n        if (r.readyState === 4) {\n            data = JSON.parse(r.responseText);\n            if (data.Result === \"success\") {\n                console.log(\"successfully logged out\");\n            } else {\n                console.log(\"failed to logout!\");\n            }\n        }\n    };\n    r.send();\n}\n","function passwordValid(password) {\n    if (password.length >= 8) {\n        return true;\n    }\n    return false;\n}\n\nfunction validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n","var DashboardHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    getInitialState: function() {\n        return {\n            messages: []\n        };\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type=\"error\" message={msg} />);\n        });\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <ul className=\"nav nav-sidebar\">\n                            <li><Link to=\"d_overview\">Overview</Link></li>\n                            <li><Link to=\"d_servers\">Servers</Link></li>\n                            <li><Link to=\"d_apps\">Applications</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        {msgs}\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar DashboardOverview = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Overview...\n            </div>\n        );\n    }\n});\n\nvar DashboardServers = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Servers...\n            </div>\n        );\n    }\n});\n\nvar DashboardApps = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Dashboard Apps...\n            </div>\n        );\n    }\n});\n","var ProfileHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <h1>Profile</h1>\n                        <ul className=\"nav nav-sidebar\">\n                            <li><Link to=\"p_password\">Password</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\">\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar ProfilePassword = React.createClass({\n    mixins: [AuthenticationMixin],\n    getInitialState: function() {\n        return {\n            password: '',\n            password_confirm: '',\n            messages: []\n        };\n    },\n    validationPasswordState: function() {\n        if (this.state.password.length > 0) {\n            if (passwordValid(this.state.password)) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    validationPasswordConfirmState: function() {\n        if (this.state.password_confirm.length > 0 || this.state.password.length > 0) {\n            if (this.state.password_confirm === this.state.password) {\n                return \"success\";\n            }\n            return \"error\";\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            password: this.refs.password.getValue(),\n            password_confirm: this.refs.password_confirm.getValue()\n        });\n    },\n    handleSubmit: function(event) {\n        event.preventDefault();\n        if (this.state.password.length < 1) {\n            this.setState({\"messages\": [{Type: \"danger\", Content: \"Password is required.\"}]});\n            return ;\n        }\n        if (this.validationPasswordState() !== \"success\" || this.validationPasswordConfirmState() !== \"success\") {\n            this.setState({\"messages\": [{Type: \"danger\", Content: \"Fix errors\"}]});\n            return ;\n        }\n        user.updatePassword(this.state.password, function(success, messages) {\n            if (success === true) {\n                this.setState({messages: messages, password: \"\", password_confirm: \"\"});\n            } else {\n                this.setState({\n                    messages: messages,\n                    password: this.state.password,\n                    password_confirm: this.state.password_confirm\n                });\n                console.log(this.state.messages);\n            }\n        }.bind(this));\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-3\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h1 className=\"page-header\">Reset Password</h1>\n                    {msgs}\n                    <Input label=\"New Password\" type=\"password\" ref=\"password\"\n                           placeholder=\"New password\" value={this.state.password}\n                           autoFocus hasFeedback bsStyle={this.validationPasswordState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Confirm Password\" type=\"password\" ref=\"password_confirm\"\n                           placeholder=\"Confirm Password\" value={this.state.password_confirm}\n                           hasFeedback bsStyle={this.validationPasswordConfirmState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        Update Password\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar user = {\n    updatePassword: function(password, cb) {\n        callback = cb;\n        if (!localStorage.id) {\n            if (callback) callback(false);\n            return ;\n        }\n        if (password.length < 1) {\n            if (callback) callback(false, [\"Password is required.\"]);\n            return ;\n        }\n        request.patch(\n            \"/api/v1/user/\" + localStorage.id,\n            {password: password},\n            this.processPatch\n        )\n    },\n    processPatch: function(res) {\n        if (res.Result == \"success\") {\n            if (callback) callback(true, [{\n                Type: \"success\",\n                Content: \"Successfully updated password.\"\n            }]);\n        } else {\n            if (callback) callback(false, res.errors);\n        }\n    }\n};\n","var settingsSideMenu = {\n    active: function(link) {\n        $(\".nav-sidebar li a\").removeClass(\"active\");\n        var elem = \"\"\n        switch (link) {\n            case \"contacts\":\n                elem = $(\".contacts-link\");\n                break\n        }\n        elem.addClass(\"active\");\n    }\n}\n\nvar SettingsHolder = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-3 col-md-2 sidebar\">\n                        <h1>Settings</h1>\n                        <ul className=\"nav nav-sidebar\">\n                            <li><Link to=\"s_commands\">Commands</Link></li>\n                            <li><Link to=\"s_contacts_list\" className=\"contacts-link\">Contacts</Link></li>\n                            <li><Link to=\"s_servers\">Servers</Link></li>\n                            <li>\n                                <Link to=\"s_timeperiods\">Time Periods</Link>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        {/*<Messages type=\"success\" message=\"Hello World\" />*/}\n                        <RouteHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar SettingsCommands = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Settings Commands...\n            </div>\n        );\n    }\n});\n\nvar SettingsServers = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Settings Servers...\n            </div>\n        );\n    }\n});\n\nvar SettingsTimePeriods = React.createClass({\n    mixins: [AuthenticationMixin],\n    render: function() {\n        return (\n            <div>\n                Settings Time Periods...\n            </div>\n        );\n    }\n});\n","var SettingsContactsList = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    propTypes: {\n        contacts: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            contacts: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        contacts.getAll(function(data, messages) {\n            this.setState({\n                contacts: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeContact: function(contact) {\n        contacts.remove(contact.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            contacts: removeFromList(this.state.contacts, contact)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var contacts = [];\n        this.state.contacts.forEach(function(contact) {\n            contacts.push(\n                <SettingsContactsLine key={contact.id} contact={contact}\n                                      removeContact={this.removeContact} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Individuals</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {contacts}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_contacts_add\" className=\"btn btn-primary\">Add Contact</Link>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeContact(this.props.contact);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_contacts_view\"\n                          params={{contactId: this.props.contact.id}}>\n                    {this.props.contact.name}</Link>\n                </td>\n                <td>{this.props.contact.user.email}</td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_contacts_update\"\n                          params={{\"contactId\": this.props.contact.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsContactsForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            email: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        if (this.props.params.contactId != undefined) {\n            var id = this.props.params.contactId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            contacts.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\", email: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name,\n                email: data.user.email\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    validateEmailState: function() {\n        if (this.state.email.length > 0) {\n            if (validateEmail(this.state.email) === true) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n            email: this.refs.email.getValue()\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.state.email.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Email is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\" || this.validateEmailState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            contacts.update(this.state.id, this.state.name, this.state.email,\n                            this.handleFormResponse);\n        } else {\n            contacts.add(this.state.name, this.state.email,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\", email: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name,\n                email: this.state.email\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Contact</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Jane Smart\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Input label=\"Email\" type=\"text\" ref=\"email\"\n                           placeholder=\"test@example.com\" value={this.state.email}\n                           hasFeedback bsStyle={this.validateEmailState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Contact\n                    </Button>\n                    <Link to=\"s_contacts_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsView = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            contact: {},\n            all_groups: [],\n            current_groups: [],\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        contacts.getGroups(\n            this.props.params.contactId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        contact: data,\n                        messages: messages\n                    });\n                    this.setGroups(data.groups.map(function(obj) {\n                        return this.renderGroup(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        contactgroups.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setGroups(undefined, data.map(function(obj) {\n                    return this.renderGroup(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        contactgroups.removeContact(\n            group.id,\n            this.props.params.contactId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_groups,\n                                          group);\n        var all = this.state.all_groups.concat(\n            this.renderGroup(group, \"available\")\n        );\n        this.setGroups(current, all);\n    },\n    addGroup: function(group) {\n        contactgroups.addContact(\n            group.id,\n            this.props.params.contactId,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_groups.concat(\n            this.renderGroup(group, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_groups, group);\n        this.setGroups(current, all);\n    },\n    renderGroup: function(group, state) {\n        return (\n            <SettingsContactsGroupElement key={group.id}\n                                          group={group}\n                                          state={state}\n                                          removeGroup={this.removeGroup}\n                                          addGroup={this.addGroup} />\n        )\n    },\n    setGroups: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_groups;\n        }\n        if (all === undefined) {\n            all = this.state.all_groups;\n        }\n        this.setState({\n            all_groups: excludeByKey(all, current),\n            current_groups: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.contact.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Groups</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_groups}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_contacts_list\"\n                      className=\"btn btn-default\">Back to List of Contacts</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupElement = React.createClass({\n    handleRemove: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    handleAdd: function() {\n        this.props.addGroup(this.props.group);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.group.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.group.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsContactsGroups = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    propTypes: {\n        groups: React.PropTypes.array,\n        messages: React.PropTypes.array\n    },\n    getInitialState: function() {\n        return {\n            groups: [],\n            messages: []\n        };\n    },\n    componentWillMount: function() {\n        contactgroups.getAll(function(data, messages) {\n            this.setState({\n                groups: data,\n                messages: messages\n            });\n        }.bind(this));\n    },\n    removeGroup: function(group) {\n        contactgroups.remove(group.id, function(messages) {\n            this.setState({messages: messages})\n        }.bind(this));\n        this.setState({\n            groups: removeFromList(this.state.groups, group)\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        var groups = [];\n        this.state.groups.forEach(function(group) {\n            groups.push(\n                <SettingsContactsGroupLine key={group.id} group={group}\n                                           removeGroup={this.removeGroup} />\n            );\n        }.bind(this));\n        return (\n            <div>\n                <h2>Groups</h2>\n                {msgs}\n                <Table striped hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {groups}\n                    </tbody>\n                </Table>\n\n                <Link to=\"s_contacts_group_add\"\n                      className=\"btn btn-primary\">Add Group</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupLine = React.createClass({\n    handleDelete: function() {\n        this.props.removeGroup(this.props.group);\n    },\n    render: function() {\n        return (\n            <tr>\n                <td>\n                    <Link to=\"s_contacts_group_contacts\"\n                          params={{\"groupId\": this.props.group.id}}\n                          >{this.props.group.name}</Link>\n                </td>\n                <td className=\"action-cell\">\n                    <Button bsSize=\"xsmall\" bsStyle=\"danger\"\n                            onClick={this.handleDelete}>\n                        Delete\n                    </Button>\n                    <Link to=\"s_contacts_group_update\"\n                          params={{\"groupId\": this.props.group.id}}\n                          className=\"btn btn-xs btn-default\">Edit</Link>\n                </td>\n            </tr>\n        );\n    }\n});\n\nvar SettingsContactsGroupForm = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            id: \"\",\n            action: \"Add\",\n            name: \"\",\n            messages: []\n        }\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        if (this.props.params.groupId != undefined) {\n            var id = this.props.params.groupId;\n            this.setState({\n                \"id\": id,\n                \"action\": \"Update\"\n            });\n            contactgroups.get(id, this.handleGet);\n        }\n    },\n    handleGet: function(data, messages) {\n        if (messages.length > 0) {\n            this.setState({messages: messages, name: \"\"});\n        } else {\n            this.setState({\n                messages: messages,\n                name: data.name\n            });\n        }\n    },\n    validateNameState: function() {\n        if (this.state.name.length > 0) {\n            if (this.state.name.length > 2) {\n                return \"success\";\n            }\n            return \"error\"\n        }\n    },\n    handleChange: function() {\n        this.setState({\n            name: this.refs.name.getValue(),\n        });\n    },\n    handleSubmit: function() {\n        event.preventDefault();\n        if (this.state.name.length < 1) {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Name is required.\"}]\n            });\n            return ;\n        }\n        if (this.validateNameState() !== \"success\") {\n            this.setState({\n                messages: [{Type: \"danger\", Content: \"Fix errors\"}]\n            });\n            return ;\n        }\n\n        if (this.state.id != \"\") {\n            contactgroups.update(this.state.id, this.state.name,\n                            this.handleFormResponse);\n        } else {\n            contactgroups.add(this.state.name,\n                         this.handleFormResponse);\n        }\n    },\n    handleFormResponse: function(success, messages) {\n        if (success == true) {\n            if (this.state.id) {\n                this.setState({messages: messages});\n            } else {\n                this.setState({messages: messages, name: \"\"});\n            }\n        } else {\n            this.setState({\n                messages: messages,\n                name: this.state.name\n            });\n        }\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return (\n            <div className=\"col-md-4\">\n                <form onSubmit={this.handleSubmit} className=\"text-left\">\n                    <h2 className=\"page-header\">{this.state.action} Contact Group</h2>\n                    {msgs}\n                    <Input label=\"Name\" type=\"text\" ref=\"name\"\n                           placeholder=\"Admins\" value={this.state.name}\n                           autoFocus hasFeedback bsStyle={this.validateNameState()}\n                           onChange={this.handleChange} />\n                    <Button type=\"submit\" bsStyle=\"success\">\n                        {this.state.action} Contact Group\n                    </Button>\n                    <Link to=\"s_contacts_list\" className=\"btn btn-default\">Cancel</Link>\n                </form>\n            </div>\n        );\n    }\n});\n\nvar SettingsContactsGroupContacts = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    getInitialState: function() {\n        return {\n            group: {},\n            messages: [],\n            all_contacts: [],\n            current_contacts: []\n        };\n    },\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n        contactgroups.getContacts(\n            this.props.params.groupId,\n            function(data, messages) {\n                if (this.isMounted()) {\n                    this.setState({\n                        group: data,\n                        messages: messages\n                    });\n                    this.setContacts(data.contacts.map(function(obj) {\n                        return this.renderContact(obj, \"current\");\n                    }.bind(this)), undefined);\n                }\n            }.bind(this)\n        );\n        contacts.getAll(function(data, messages) {\n            if (this.isMounted()) {\n                this.setState({messages: messages});\n                this.setContacts(undefined, data.map(function(obj) {\n                    return this.renderContact(obj, \"available\");\n                }.bind(this)));\n            }\n        }.bind(this));\n    },\n    removeContact: function(contact) {\n        contactgroups.removeContact(\n            this.props.params.groupId,\n            contact.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = removeFromListByKey(this.state.current_contacts,\n                                          contact);\n        var all = this.state.all_contacts.concat(\n            this.renderContact(contact, \"available\")\n        );\n        this.setContacts(current, all);\n    },\n    addContact: function(contact) {\n        contactgroups.addContact(\n            this.props.params.groupId,\n            contact.id,\n            function(data, messages) {\n                this.setState({\n                    messages: messages\n                });\n            }.bind(this)\n        );\n        var current = this.state.current_contacts.concat(\n            this.renderContact(contact, \"current\")\n        );\n        var all = removeFromListByKey(this.state.all_contacts, contact);\n        this.setContacts(current, all);\n    },\n    renderContact: function(contact, state) {\n        return (\n            <SettingsContactsGroupContactLine key={contact.id}\n                                              contact={contact}\n                                              state={state}\n                                              removeContact={this.removeContact}\n                                              addContact={this.addContact} />\n        )\n    },\n    setContacts: function(current, all) {\n        if (current === undefined) {\n            current = this.state.current_contacts;\n        }\n        if (all === undefined) {\n            all = this.state.all_contacts;\n        }\n        this.setState({\n            all_contacts: excludeByKey(all, current),\n            current_contacts: current\n        });\n    },\n    render: function() {\n        var msgs = [];\n        this.state.messages.forEach(function(msg) {\n            msgs.push(<Messages type={msg.Type} message={msg.Content} />);\n        });\n        return(\n            <div>\n                {msgs}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <h2>{this.state.group.name}</h2>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.current_contacts}\n                          </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <h3 className=\"side-list-header\">Available Contacts</h3>\n                        <table className=\"table table-striped table-condensed table-hover\">\n                          <tbody>\n                            {this.state.all_contacts}\n                          </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Link to=\"s_contacts_list\"\n                      className=\"btn btn-default\">Back to Contacts</Link>\n            </div>\n        )\n    }\n});\n\nvar SettingsContactsGroupContactLine = React.createClass({\n    handleRemove: function() {\n        this.props.removeContact(this.props.contact);\n    },\n    handleAdd: function() {\n        this.props.addContact(this.props.contact);\n    },\n    render: function() {\n        var button = [];\n        if (this.props.state === \"available\") {\n            button.push(\n                <Button key={this.props.contact.id} bsSize=\"xsmall\"\n                        bsStyle=\"success\"\n                        onClick={this.handleAdd}>Add</Button>\n            );\n        } else {\n            button.push(\n                <Button key={this.props.contact.id} bsSize=\"xsmall\"\n                        bsStyle=\"danger\"\n                        onClick={this.handleRemove}>Remove</Button>\n            );\n        }\n        return (\n            <tr>\n                <td>{this.props.contact.name}</td>\n                <td>{button}</td>\n            </tr>\n        )\n    }\n})\n","var SettingsContactsMixin = {\n    componentDidMount: function() {\n        settingsSideMenu.active(\"contacts\");\n    }\n};\n\nvar SettingsContactsHolder = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    render: function() {\n        return (\n            <div>\n                <h1 className=\"page-header\">Contacts</h1>\n                <RouteHandler />\n            </div>\n        );\n    }\n});\n\nvar SettingsContacts = React.createClass({\n    mixins: [AuthenticationMixin, SettingsContactsMixin],\n    render: function() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <SettingsContactsGroups />\n                </div>\n                <div className=\"col-md-6\">\n                    <SettingsContactsList />\n                </div>\n            </div>\n        )\n    }\n});\n","var contacts = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/contacts/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/contacts/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, email, cb) {\n        request.post(\n            \"/api/v1/contacts/\",\n            {name: name, email: email},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/contacts/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, email, cb) {\n        request.put(\n            \"/api/v1/contacts/\" + id,\n            {name: name, email: email},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated contact.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getGroups: function(id, cb) {\n        request.get(\n            \"/api/v1/contacts/\" + id + \"/groups/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n}\n","var contactgroups = {\n    get: function(id, cb) {\n        request.get(\"/api/v1/contacts/groups/\" + id, function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb([], data.Messages);\n            }\n        });\n    },\n    getAll: function(cb) {\n        request.get(\"/api/v1/contacts/groups/\", function(data) {\n            if (data.Result === \"success\") {\n                cb(data.Data, []);\n            } else {\n                cb({data: [], errors: data.Messages});\n            }\n        });\n    },\n    add: function(name, cb) {\n        request.post(\n            \"/api/v1/contacts/groups/\",\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    remove: function(id, cb) {\n        request.remove(\n            \"/api/v1/contacts/groups/\" + id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb([{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(res.Messages);\n                }\n            }\n        );\n    },\n    update: function(id, name, cb) {\n        request.put(\n            \"/api/v1/contacts/groups/\" + id,\n            {name: name},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(true, [{\n                        Type: \"success\",\n                        Content: \"Successfully updated contact group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    getContacts: function(id, cb) {\n        request.get(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\",\n            function(data) {\n                if (data.Result === \"success\") {\n                    cb(data.Data, []);\n                } else {\n                    cb([], data.Messages);\n                }\n            }\n        );\n    },\n    addContact: function(id, contact_id, cb) {\n        request.post(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\",\n            {id: parseInt(contact_id, 10)},\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully added contact to group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    },\n    removeContact: function(id, contact_id, cb) {\n        request.remove(\n            \"/api/v1/contacts/groups/\" + id + \"/contacts/\" + contact_id,\n            function(res) {\n                if (res.Result == \"success\") {\n                    if (cb) cb(res.Data, [{\n                        Type: \"success\",\n                        Content: \"Successfully removed contact from group.\"\n                    }]);\n                } else {\n                    if (cb) cb(false, res.Messages);\n                }\n            }\n        );\n    }\n}\n","var Router = ReactRouter,\n    Route = Router.Route,\n    Link = Router.Link,\n    RouteHandler = Router.RouteHandler,\n    DefaultRoute = Router.DefaultRoute,\n    Redirect = Router.Redirect,\n    NotFoundRoute = Router.NotFoundRoute,\n\n    // bootstrap\n    Input = ReactBootstrap.Input,\n    Button = ReactBootstrap.Button,\n    Table = ReactBootstrap.Table;\n\nvar App = React.createClass({\n    getInitialState: function() {\n        return {\n            loggedIn: auth.loggedIn(),\n            messages: []\n        };\n    },\n    setStateOnAuth: function(loggedIn, messages) {\n        this.setState({loggedIn: loggedIn, messages: messages});\n    },\n    componentWillMount: function() {\n        auth.onChange = this.setStateOnAuth;\n        auth.login();\n    },\n    render: function() {\n        var Navbar = ReactBootstrap.Navbar,\n            Nav = ReactBootstrap.Nav,\n            NavItem = ReactBootstrap.NavItem;\n        if (this.state.loggedIn) {\n            accessLink = <NavItem href=\"#/logout\">Sign Out</NavItem>;\n        } else {\n            accessLink = <NavItem href=\"#/login\">Sign In</NavItem>;\n        }\n        return (\n            <div>\n                <Navbar brand=\"ZenPager\" fixedTop fluid inverse>\n                    <Nav right>\n                        <NavItem href=\"#/dashboard\">Dashboard</NavItem>\n                        <NavItem href=\"#/settings\">Settings</NavItem>\n                        <NavItem href=\"#/profile\">Profile</NavItem>\n                        {accessLink}\n                    </Nav>\n                </Navbar>\n                <RouteHandler messages={this.state.messages} />\n            </div>\n        );\n    }\n});\n\nvar Messages = React.createClass({\n    getInitialState: function() {\n        return {\n            visible: true\n        };\n    },\n    handleDismiss: function() {\n        this.setState({visible: false});\n    },\n    render: function() {\n        if (this.state.visible) {\n            var Alert = ReactBootstrap.Alert;\n            return (\n                <Alert bsStyle={this.props.type}\n                       onDismiss={this.handleDismiss}>\n                    {this.props.message}\n                </Alert>\n            );\n        }\n        return <div></div>;\n    }\n});\n\nvar NotFound = React.createClass({\n    render: function() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-9 col-sm-offset-3 col-md-10\n                                    col-md-offset-2 main\">\n                        <h1>404 Not Found</h1>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n});\n\nvar routes = (\n    <Route name=\"app\" path=\"/\" handler={App}>\n        <NotFoundRoute handler={NotFound} />\n        <Route name=\"login\" handler={Login} />\n        <Route name=\"logout\" handler={Logout} />\n        <Route name=\"dashboard\" handler={DashboardHolder}>\n            <Route name=\"d_overview\" path=\"overview\"\n                   handler={DashboardOverview} />\n            <Route name=\"d_servers\" path=\"servers\"\n                   handler={DashboardServers} />\n            <Route name=\"d_apps\" path=\"apps\" handler={DashboardApps} />\n            <Redirect from=\"/dashboard\" to=\"d_overview\" />\n        </Route>\n        <Route name=\"settings\" handler={SettingsHolder}>\n            <Route name=\"s_commands\" path=\"commands\"\n                   handler={SettingsCommands} />\n            <Route name=\"contacts\" handler={SettingsContactsHolder}>\n                <Route name=\"s_contacts_list\" path=\"list\"\n                       handler={SettingsContacts} />\n                <Route name=\"s_contacts_add\" path=\"add\"\n                       handler={SettingsContactsForm} />\n                <Route name=\"s_contacts_update\" path=\"update/:contactId\"\n                       handler={SettingsContactsForm} />\n                <Route name=\"s_contacts_view\" path=\":contactId\"\n                       handler={SettingsContactsView} />\n                <Route name=\"s_contacts_group_add\" path=\"group/add\"\n                       handler={SettingsContactsGroupForm} />\n                <Route name=\"s_contacts_group_update\"\n                       path=\"group/update/:groupId\"\n                       handler={SettingsContactsGroupForm} />\n                <Route name=\"s_contacts_group_contacts\" path=\"group/:groupId\"\n                       handler={SettingsContactsGroupContacts} />\n                <Redirect from=\"/contacts\" to=\"s_contacts_list\" />\n            </Route>\n            <Route name=\"s_servers\" path=\"servers\" handler={SettingsServers} />\n            <Route name=\"s_timeperiods\" path=\"timeperiods\"\n                   handler={SettingsTimePeriods} />\n            <Redirect from=\"/settings\" to=\"s_commands\" />\n        </Route>\n        <Route name=\"profile\" handler={ProfileHolder}>\n            <Route name=\"p_password\" path=\"password\"\n                   handler={ProfilePassword} />\n            <Redirect from=\"/profile\" to=\"p_password\" />\n        </Route>\n        <Redirect from=\"/\" to=\"d_overview\" />\n    </Route>\n);\n\nRouter.run(routes, function(Handler) {\n    React.render(<Handler />, document.body);\n});\n"],"sourceRoot":"/source/"}